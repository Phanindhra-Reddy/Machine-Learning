# -*- coding: utf-8 -*-
"""CreditCardFraudDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtC2g8E7zjMdsPQQ-SjyaAilnRIesgfv

# **Importing the required packages**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Loading the dataset**"""

credit_card_data = pd.read_csv("creditcard.csv")

"""first five rows"""

credit_card_data.head()

"""last five rows"""

credit_card_data.tail()

"""dataset information"""

credit_card_data.info()

"""# **Data preprocessing**

checking whether there are any null values in the dataset
"""

credit_card_data.isnull().sum()

#removing the null values
credit_card_data = credit_card_data.dropna()
credit_card_data.isnull().sum()

"""description about lable of the dataset"""

credit_card_data['Class'].value_counts()

"""Seperating both the classes"""

normal = credit_card_data[credit_card_data.Class==0]
fraud = credit_card_data[credit_card_data.Class==1]
print("normal transactions ",normal.shape)
print("fraudantal transactions ",fraud.shape)

"""summary of amount column in both classes"""

normal.Amount.describe()

fraud.Amount.describe()

# compare the values for both transactions
credit_card_data.groupby('Class').mean()

"""# **Data Sampling**"""

normal_sample = normal.sample(n=330)

working_data = pd.concat([normal_sample, fraud], axis=0)

working_data.head()

working_data.tail()

working_data['Class'].value_counts()

working_data.groupby('Class').mean()

"""# **Working on the problem**"""

#splitting the dataset as lable and attributes
X = working_data.drop(columns='Class', axis=1)
Y = working_data['Class']

Y

"""splitting the data into Training data & Testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)
X_train

print(X.shape, X_train.shape, X_test.shape)

X_train = np.array(X_train)
Y_train = np.array(Y_train)

"""# **Training the model using Logistic Regression**"""

model = LogisticRegression(solver='lbfgs', max_iter=1000)

model.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)*100

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score on Test Data : ', test_data_accuracy)